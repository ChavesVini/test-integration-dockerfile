name: CI and Auto Merge PR to Main

on:
  pull_request:
    branches:
      - dev
      - main

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK (se for um projeto Java, por exemplo)
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Verify Java version
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          mvn -version

      - name: Install dependencies
        run: |
          mvn -f ./demo/pom.xml clean install

      - name: Run tests
        run: |
          mvn -f ./demo/pom.xml test

  automatic-deploy:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: ci
    env:
      OCTOPUS_API_KEY: ${{ secrets.API_KEY  }}
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_SPACE: 'Default'
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Determine next release and tag numbers
        id: versioning
        run: |
          git fetch --tags
          git fetch --prune --unshallow || true

          LAST_TAG=$(git tag | grep '^release-[0-9]\+$' | sed 's/release-//' | sort -nr | head -n1)
          if [ -z "$LAST_TAG" ]; then
            NEXT_TAG=1
          else
            NEXT_TAG=$((LAST_TAG + 1))
          fi
      
          echo "NEXT_TAG=$NEXT_TAG"
          echo "tag_number=$NEXT_TAG" >> $GITHUB_OUTPUT
      
          RELEASES=$(gh release list --limit 100 | grep '^Sprint-' | awk '{print $1}' | sed 's/Sprint-//' | sort -nr)
          LAST_RELEASE=$(echo "$RELEASES" | head -n1)
          if [ -z "$LAST_RELEASE" ]; then
            NEXT_RELEASE=1
          else
            NEXT_RELEASE=$((LAST_RELEASE + 1))
          fi
      
          echo "NEXT_RELEASE=$NEXT_RELEASE"
          echo "release_number=$NEXT_RELEASE" >> $GITHUB_OUTPUT

      - name: Install Octopus CLI
        uses: OctopusDeploy/install-octopus-cli-action@v3
        with:
          version: '*'

      - name: Create a Zip package
        uses: OctopusDeploy/create-zip-package-action@v3
        with:
          package_id: 'release'
          version: '${{ steps.versioning.outputs.tag_number }}'
          output_folder: './packaging'
          base_path: '.'
          files: |
            **/*.*
        
      - name: Push a package to Octopus Deploy
        uses: OctopusDeploy/push-package-action@v3
        with:
          packages: |
            packaging/release.${{ steps.versioning.outputs.tag_number }}.zip

      - name: Create GitHub Release
        if: github.base_ref == 'main'
        uses: softprops/action-gh-release@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ steps.versioning.outputs.tag_number }}"
          name: "Sprint-${{ steps.versioning.outputs.tag_number }}"
          body: |
            Commits inclu√≠dos:
            ${{ github.event.pull_request.body }}

      - name: Create release in Octopus Deploy (for production)
        if: github.base_ref == 'main'
        id: create_release_prod
        uses: OctopusDeploy/create-release-action@v3
        with:
          project: 'testes'
          release_number: "v${{ steps.versioning.outputs.tag_number }}.0"
          package_version: "${{ steps.versioning.outputs.tag_number }}"
          packages: |
            "Production:123:${{ steps.versioning.outputs.tag_number }}"
          
      - name: Deploy a release in Octopus Deploy
        if: github.base_ref == 'main'
        uses: OctopusDeploy/deploy-release-action@v3
        with:
          project: 'testes'
          release_number: "v${{ steps.versioning.outputs.tag_number }}.0"
          environments: |
            Production
      
  merge:
    needs: [ci, automatic-deploy]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/install.sh | bash
          gh --version

      - name: Enable auto-merge for PR
        run: |
          gh pr merge "$GITHUB_HEAD_REF" \
            --repo "$GITHUB_REPOSITORY" \
            --auto \
            --merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
