name: CI and Auto Merge PR to Main

on:
  pull_request:
    branches:
      - dev
      - main
      - 'Sprint-*'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Verify Java version
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          mvn -version

      - name: Install dependencies
        run: mvn -f ./demo/pom.xml clean install

      - name: Run tests
        run: mvn -f ./demo/pom.xml test
        
  package:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OCTOPUS_API_KEY: ${{ secrets.API_KEY }}
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_SPACE: 'Default'
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      package_version: ${{ steps.versioning.outputs.package_version }}
      release_name: ${{ steps.versioning.outputs.release_name }}
      is_main: ${{ steps.determine-environment.outputs.is_main }}
    steps:
      - uses: actions/checkout@v4

      - id: determine-environment
        run: |
          BRANCH="${{ github.base_ref }}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "octo_env=Staging" >> $GITHUB_OUTPUT
            echo "is_main=true" >> $GITHUB_OUTPUT
          else
            echo "octo_env=Development" >> $GITHUB_OUTPUT
            echo "is_main=false" >> $GITHUB_OUTPUT
          fi

      - id: versioning
        env:
          OCTOPUS_API_KEY: ${{ secrets.API_KEY }}
          OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
          OCTOPUS_SPACE: 'Default'
          PROJECT_NAME: 'testes'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          BASE_BRANCH="${{ github.base_ref }}"
          echo "Base branch: $BASE_BRANCH"
      
          LAST_GH_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r '.tag_name')
      
          echo "Última release GitHub (tag): $LAST_GH_RELEASE"
      
          RAW_VERSION=${LAST_GH_RELEASE#release-}
          MAJOR=$(echo "$RAW_VERSION" | cut -d. -f1)
          MAJOR=${MAJOR:-1}
      
          PROJECT_ID=$(curl -s -H "X-Octopus-ApiKey: $OCTOPUS_API_KEY" \
            "$OCTOPUS_URL/api/spaces/$OCTOPUS_SPACE/projects?partialName=$PROJECT_NAME" | jq -r '.Items[0].Id')
      
          echo "Project ID: $PROJECT_ID"
      
          LAST_OCTOPUS_RELEASE=$(curl -s -H "X-Octopus-ApiKey: $OCTOPUS_API_KEY" \
            "$OCTOPUS_URL/api/spaces/$OCTOPUS_SPACE/projects/$PROJECT_ID/releases?order=Descending" | jq -r '.Items[0].Version')
      
          echo "Última release no Octopus: $LAST_OCTOPUS_RELEASE"
      
          MINOR=$(echo "$LAST_OCTOPUS_RELEASE" | cut -s -d. -f2)
          MINOR=${MINOR:-0}
      
          if [[ "$BASE_BRANCH" == "main" ]]; then
            NEXT_MAJOR=$((MAJOR + 1))
            echo "Versão principal incrementada para: $NEXT_MAJOR"
            echo "package_version=$NEXT_MAJOR.0" >> $GITHUB_OUTPUT
            echo "release_name=release-$NEXT_MAJOR.0" >> $GITHUB_OUTPUT
          else
            NEXT_MINOR=$((MINOR + 1))
            echo "Versão secundária incrementada para: $MAJOR.$NEXT_MINOR"
            echo "package_version=$MAJOR.$NEXT_MINOR" >> $GITHUB_OUTPUT
            echo "release_name=release-$MAJOR.$NEXT_MINOR" >> $GITHUB_OUTPUT
          fi
          
      - name: Create a Zip package
        uses: OctopusDeploy/create-zip-package-action@v3
        with:
          package_id: 'release'
          version: '${{ steps.versioning.outputs.package_version }}'
          output_folder: './packaging'
          base_path: '.'
          files: |
            **/*.*

      - name: Push a package to Octopus Deploy
        uses: OctopusDeploy/push-package-action@v3
        with:
          packages: |
            ./packaging/release.${{ steps.versioning.outputs.package_version }}.zip

      - name: Create release in Octopus Deploy
        uses: OctopusDeploy/create-release-action@v3
        with:
          project: 'testes'
          release_number: "${{ steps.versioning.outputs.package_version }}"
          package_version: "${{ steps.versioning.outputs.package_version }}"
          packages: |
            "${{ steps.determine-environment.outputs.octo_env }}:release:${{ steps.versioning.outputs.package_version }}"

      - name: Deploy release in Octopus Deploy (main branch only)
        uses: OctopusDeploy/deploy-release-action@v3
        with:
          project: 'testes'
          release_number: "${{ steps.versioning.outputs.package_version }}"
          environments: |
            Staging
            
  release:
    needs: [ci, package]
    if: needs.package.outputs.is_main == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ needs.package.outputs.release_name }}"
          name: "Sprint-${{ needs.package.outputs.release_name }}"

  merge:
    needs: [ci, package]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/install.sh | bash
          gh --version

      - name: Enable auto-merge for PR
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --repo "$GITHUB_REPOSITORY" \
            --auto \
            --merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
