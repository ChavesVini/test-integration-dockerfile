name: CI and Auto Merge PR to Main

on:
  pull_request:
    branches:
      - dev
      - main
      - 'Sprint-*'

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK (se for um projeto Java)
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Verify Java version
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          mvn -version

      - name: Install dependencies
        run: mvn -f ./demo/pom.xml clean install

      - name: Run tests
        run: mvn -f ./demo/pom.xml test

  package:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OCTOPUS_API_KEY: ${{ secrets.API_KEY  }}
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_SPACE: 'Default'
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      package_version: ${{ steps.versioning.outputs.package_version }}
      is_main: ${{ steps.check-main.outputs.is_main }}
    steps:
      - uses: actions/checkout@v4
      
      - id: check-main
        run: |
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "is_main=true" >> $GITHUB_OUTPUT
          else
            echo "is_main=false" >> $GITHUB_OUTPUT
          fi

      - id: versioning
        run: |
          BRANCH="${{ github.base_ref }}"
          if [[ "$BRANCH" =~ ^Sprint-([0-9]+)$ ]]; then
            # lógica de versionamento sprint
            echo "package_version=vSprint.x" >> $GITHUB_OUTPUT
          else
            # versão padrão para dev/main etc
            echo "package_version=release-1" >> $GITHUB_OUTPUT
          fi

      - name: Push tag if on main
        if: steps.check-main.outputs.is_main == 'true'
        run: |
          git tag "${{ steps.versioning.outputs.package_version }}"
          git push origin "${{ steps.versioning.outputs.package_version }}"

      - name: Package and push to Octopus
        run: |
          # criação do pacote e push para Octopus Deploy
          echo "Pacote enviado para Octopus com versão ${{ steps.versioning.outputs.package_version }}"

      - name: Create GitHub Release
        if: github.event.pull_request.base.ref == 'main'
        uses: softprops/action-gh-release@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ steps.versioning.outputs.tag_number }}"
          name: "Sprint-${{ steps.versioning.outputs.tag_number }}"
          body: |
            Commits incluídos:
            ${{ github.event.pull_request.body }}

      - name: Create release in Octopus Deploy (for production)
        if: github.event.pull_request.base.ref == 'main'
        id: create_release_prod
        uses: OctopusDeploy/create-release-action@v3
        with:
          project: 'testes'
          release_number: "v${{ steps.versioning.outputs.tag_number }}.0"
          package_version: "${{ steps.versioning.outputs.tag_number }}"
          packages: |
            "Production:release:${{ steps.versioning.outputs.tag_number }}"
          
      - name: Deploy a release in Octopus Deploy
        if: github.event.pull_request.base.ref == 'main'
        uses: OctopusDeploy/deploy-release-action@v3
        with:
          project: 'testes'
          release_number: "v${{ steps.versioning.outputs.tag_number }}.0"
          environments: |
            Production
      
  merge:
    needs: [ci, package]
    runs-on: ubuntu-latest
    env:
      OCTOPUS_API_KEY: ${{ secrets.API_KEY  }}
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_SPACE: 'Default'
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/install.sh | bash
          gh --version
  
      - name: Enable auto-merge for PR
        run: |
          gh pr merge "$GITHUB_HEAD_REF" \
            --repo "$GITHUB_REPOSITORY" \
            --auto \
            --merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: [ci, package, merge]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        if: needs.package.outputs.is_main == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.package.outputs.package_version }}
          name: "Release ${{ needs.package.outputs.package_version }}"

      - name: Create release in Octopus Deploy
        run: |
          echo "Criando release Octopus com versão ${{ needs.package.outputs.package_version }}"

      - name: Deploy release in Octopus Deploy
        run: |
          echo "Fazendo deploy no Octopus Deploy para ambiente Production"
