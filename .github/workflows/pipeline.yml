name: CI and Auto Merge PR to Main

on:
  pull_request:
    branches:
      - dev
      - main
      - 'Sprint-*'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Verify Java version
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          mvn -version

      - name: Install dependencies
        run: mvn -f ./demo/pom.xml clean install

      - name: Run tests
        run: mvn -f ./demo/pom.xml test
        
  package:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      package_version: ${{ steps.versioning.outputs.package_version }}
      release_name: ${{ steps.versioning.outputs.release_name }}
      is_main: ${{ steps.determine-environment.outputs.is_main }}
    steps:
      - uses: actions/checkout@v4

      - id: determine-environment
        run: |
          BRANCH="${{ github.base_ref }}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "octo_env=Staging" >> $GITHUB_OUTPUT
            echo "is_main=true" >> $GITHUB_OUTPUT
          else
            echo "octo_env=Development" >> $GITHUB_OUTPUT
            echo "is_main=false" >> $GITHUB_OUTPUT
          fi

      - id: versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          BASE_BRANCH="${{ github.base_ref }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          GITHUB_REPOSITORY="${{ github.repository }}"
          
          echo "Base branch: $BASE_BRANCH"
          
          LAST_TAG=$(git ls-remote --tags origin | grep -o 'refs/tags/v[0-9]\+\(\.[0-9]\+\)*' | sort -V | tail -1 | sed 's/refs\/tags\///')
          echo "Última tag encontrada: $LAST_TAG"
          
          if [[ -z "$LAST_TAG" ]]; then
            NEXT_VERSION="1.0"
          else
            RAW_VERSION=${LAST_TAG#v}
            
            MAJOR=$(echo "$RAW_VERSION" | cut -d. -f1)
            MINOR=$(echo "$RAW_VERSION" | cut -d. -f2)
            MINOR=${MINOR:-0}
          
            if [[ "$BASE_BRANCH" == "main" ]]; then
              NEXT_MAJOR=$((MAJOR + 1))
              NEXT_VERSION="$NEXT_MAJOR.0"
            elif [[ "$BASE_BRANCH" == sprint-* ]]; then
              NEXT_MINOR=$((MINOR + 1))
              NEXT_VERSION="$MAJOR.$NEXT_MINOR"
            else
              NEXT_MINOR=$((MINOR + 1))
              NEXT_VERSION="$MAJOR.$NEXT_MINOR"
            fi
          fi
          
          echo "Próxima versão: $NEXT_VERSION"
          VERSION_TAG="v$NEXT_VERSION"
          
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          git tag $VERSION_TAG
          git push origin $VERSION_TAG
          
          echo "package_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "release_name=$NEXT_VERSION" >> $GITHUB_OUTPUT

  merge:
    needs: [ci, package]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: write
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build with Maven
        run: mvn clean install
        working-directory: ./demo
    
      - name: Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: testes3312
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./demo/target/*.war

      - name: Set up GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/install.sh | bash
          gh --version

      - name: Enable auto-merge for PR
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --repo "$GITHUB_REPOSITORY" \
            --auto \
            --merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
