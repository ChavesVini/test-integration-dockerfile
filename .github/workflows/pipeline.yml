name: CI and Auto Merge PR to Main

on:
  pull_request:
    branches:
      - dev
      - main
      - 'Sprint-*'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK (se for um projeto Java)
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Verify Java version
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          mvn -version

      - name: Install dependencies
        run: mvn -f ./demo/pom.xml clean install

      - name: Run tests
        run: mvn -f ./demo/pom.xml test

  package:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OCTOPUS_API_KEY: ${{ secrets.API_KEY  }}
      OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_SPACE: 'Default'
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      package_version: ${{ steps.versioning.outputs.package_version }}
      is_main: ${{ steps.check-main.outputs.is_main }}
    steps:
      - uses: actions/checkout@v4

      - id: check-main
        run: |
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "is_main=true" >> $GITHUB_OUTPUT
          else
            echo "is_main=false" >> $GITHUB_OUTPUT
          fi

      - id: versioning
        run: |
          git fetch --tags --unshallow || true
          BRANCH="${{ github.base_ref }}"

          if [[ "$BRANCH" =~ ^Sprint-([0-9]+)$ ]]; then
            SPRINT_NUM="${BASH_REMATCH[1]}"
            echo "package_version=Sprint-${SPRINT_NUM}" >> $GITHUB_OUTPUT
          else
            LAST_TAG=$(git tag | grep '^release-[0-9]\+$' | sed 's/release-//' | sort -n | tail -n1)
            if [[ -z "$LAST_TAG" ]]; then
              NEXT_TAG=1
            else
              NEXT_TAG=$((LAST_TAG + 1))
            fi
            echo "package_version=release-${NEXT_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Push tag if on main
        if: steps.check-main.outputs.is_main == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "${{ steps.versioning.outputs.package_version }}"
          git push origin "${{ steps.versioning.outputs.package_version }}"

      - name: Package and push to Octopus
        run: |
          echo "Pacote enviado para Octopus com versão ${{ steps.versioning.outputs.package_version }}"
          # Simulação de empacotamento e push

      - name: Create release in Octopus Deploy (for production)
        if: steps.check-main.outputs.is_main == 'true'
        uses: OctopusDeploy/create-release-action@v3
        with:
          project: 'testes'
          release_number: "${{ steps.versioning.outputs.package_version }}.0"
          package_version: "${{ steps.versioning.outputs.package_version }}"
          packages: |
            "Staging:release:${{ steps.versioning.outputs.package_version }}"

      - name: Deploy release in Octopus Deploy (main branch only)
        if: steps.check-main.outputs.is_main == 'true'
        uses: OctopusDeploy/deploy-release-action@v3
        with:
          project: 'testes'
          release_number: "${{ steps.versioning.outputs.package_version }}.0"
          environments: |
            Staging

  merge:
    needs: [ci, package]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/install.sh | bash
          gh --version

      - name: Enable auto-merge for PR
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --repo "$GITHUB_REPOSITORY" \
            --auto \
            --merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: [ci, package, merge]
    if: needs.package.outputs.is_main == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.package.outputs.package_version }}
          name: "Release ${{ needs.package.outputs.package_version }}"
          body: |
            Commits incluídos:
            ${{ github.event.pull_request.body }}

      - name: Confirm Octopus Release
        run: |
          echo "Release registrado no Octopus: ${{ needs.package.outputs.package_version }}"
