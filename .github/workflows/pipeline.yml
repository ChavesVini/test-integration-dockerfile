name: CI and Auto Merge PR to Main

on:
  pull_request:
    branches:
      - Sprint-*
      - dev
      - main

jobs:
  ci:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    env:
          OCTOPUS_API_KEY: ${{ secrets.API_KEY  }}
          OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
          OCTOPUS_SPACE: 'Default'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK (se for um projeto Java, por exemplo)
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Verify Java version
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          mvn -version

      - name: Install dependencies
        run: |
          mvn -f ./demo/pom.xml clean install

      - name: Run tests
        run: |
          mvn -f ./demo/pom.xml test

      - name: Determine next version based on last GitHub Release and tags
        id: versioning
        run: |
          git fetch --tags
          git fetch --prune --unshallow || true
      
          # Get latest GitHub release tag (e.g., release-1.0)
          LAST_RELEASE=$(git tag --sort=-creatordate | grep '^release-[0-9]\+\.0$' | head -n1)
      
          if [ -z "$LAST_RELEASE" ]; then
            MAJOR=0
          else
            MAJOR=$(echo "$LAST_RELEASE" | cut -d'-' -f2 | cut -d'.' -f1)
          fi
      
          # If merging to main, increment the MAJOR version and create release tag
          if [ "${{ github.base_ref }}" = "main" ]; then
            MAJOR=$((MAJOR + 1))
            echo "Creating new major release: $MAJOR.0"
            VERSION="$MAJOR.0.0"
          else
            # Find latest patch for this MAJOR
            TAGS=$(git tag --sort=creatordate | grep "^$MAJOR\.0\.[0-9]\+$" || echo "")
            if [ -n "$TAGS" ]; then
              LAST_PATCH=$(echo "$TAGS" | sed -E "s/^$MAJOR\.0\.//" | sort -n | tail -n1)
              PATCH=$((LAST_PATCH + 1))
            else
              PATCH=0
            fi
            VERSION="$MAJOR.0.$PATCH"
          fi
      
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Install Octopus CLI
        uses: OctopusDeploy/install-octopus-cli-action@v3
        with:
          version: '*'

      - name: Create a Zip package
        uses: OctopusDeploy/create-zip-package-action@v3
        with:
          package_id: '123'
          version: '${{ steps.versioning.outputs.version }}'
          output_folder: './packaging'
          base_path: '.'
          files: |
            **/*.*
        
      - name: Push a package to Octopus Deploy
        uses: OctopusDeploy/push-package-action@v3
        with:
          overwrite_mode: 'IgnoreIfExists'
          packages: |
            packaging/**/*.zip

      - name: Create GitHub Release
        if: github.base_ref == 'main'
        uses: softprops/action-gh-release@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ steps.versioning.outputs.version }}"
          name: "Release ${{ steps.versioning.outputs.version }}"
          body: |
            Commits incluídos:
            ${{ github.event.pull_request.body }}

      - name: Create Git Tag
        if: startsWith(github.base_ref, 'Sprint-')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            git config user.name "github-actions"
            git config user.email "actions@github.com"
        
            TAG_NAME="version-${{ steps.versioning.outputs.version }}"
        
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "Tag $TAG_NAME já existe. Pulando criação."
            else
              git tag "$TAG_NAME"
              git push origin "$TAG_NAME"
            fi

      - name: Create release in Octopus Deploy (for development)
        if: startsWith(github.base_ref, 'Sprint-')
        id: create_release_dev
        uses: OctopusDeploy/create-release-action@v3
        with:
          project: 'testes'
          release_number: "${{ steps.versioning.outputs.version }}"
          package_version: "${{ steps.versioning.outputs.version }}"
          packages: |
            "Development:123:${{ steps.versioning.outputs.version }}"

      - name: Create release in Octopus Deploy (for production)
        if: github.base_ref == 'main'
        id: create_release_prod
        uses: OctopusDeploy/create-release-action@v3
        with:
          project: 'testes'
          release_number: "${{ steps.versioning.outputs.version }}"
          package_version: "${{ steps.versioning.outputs.version }}"
          packages: |
            "Production:123:${{ steps.versioning.outputs.version }}"
